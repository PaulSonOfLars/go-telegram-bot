package main

import (
	"fmt"
	"strconv"
	"strings"
	"text/template"
)

var (
	genericInterfaceTmpl      = template.Must(template.New("genericInterface").Parse(genericInterfaceMethod))
	inputMediaParamsTmpl      = template.Must(template.New("inputMediaParamsMethod").Parse(inputMediaParamsMethod))
	getCommonFieldTmpl        = template.Must(template.New("getCustomFieldMethod").Parse(getCustomFieldMethod))
	customMarshalTmpl         = template.Must(template.New("customMarshal").Parse(customMarshal))
	customUnmarshalTmpl       = template.Must(template.New("customUnmarshal").Parse(customUnmarshal))
	customStructUnmarshalTmpl = template.Must(template.New("customStructUnmarshal").Parse(customStructUnmarshal))
)

func generateTypes(d APIDescription) error {
	file := strings.Builder{}
	file.WriteString(`
// THIS FILE IS AUTOGENERATED. DO NOT EDIT.
// Regen by running 'go generate' in the repo root.

package gotgbot

import (
	"encoding/json"
	"fmt"
	"io"
)
`)

	// the reply_markup field is weird; this allows it to support multiple types.
	replyMarkupInterface, err := generateGenericInterfaceType(d, "ReplyMarkup", getReplyMarkupTypes(d))
	if err != nil {
		return fmt.Errorf("failed to generate reply_markup interface: %w", err)
	}

	file.WriteString(replyMarkupInterface)

	for _, tgTypeName := range orderedTgTypes(d) {
		tgType := d.Types[tgTypeName]

		typeDef, err := generateTypeDef(d, tgType)
		if err != nil {
			return fmt.Errorf("failed to generate type definition of %s: %w", tgTypeName, err)
		}

		file.WriteString(typeDef)
	}

	return writeGenToFile(file, "gen_types.go")
}

func generateTypeDef(d APIDescription, tgType TypeDescription) (string, error) {
	typeDef := strings.Builder{}

	for idx, d := range tgType.Description {
		text := d
		if idx == 0 {
			text = tgType.Name + " " + d
		}

		typeDef.WriteString("\n// " + text)
	}

	typeDef.WriteString("\n// " + tgType.Href)

	if len(tgType.Fields) == 0 {
		switch tgType.Name {
		case tgTypeInputMedia,
			tgTypeCallbackGame,
			tgTypeInlineQueryResult,
			tgTypeInputFile,
			tgTypeInputMessageContent,
			tgTypePassportElementError,
			tgTypeChatMember,
			tgTypeBotCommandScope:
			subTypes, err := getTypesByName(d, tgType.Subtypes)
			if err != nil {
				return "", fmt.Errorf("failed to get subtypes by name for %s: %w", tgType.Name, err)
			}

			interfaceDefinition, err := generateGenericInterfaceType(d, tgType.Name, subTypes)
			if err != nil {
				return "", fmt.Errorf("failed to generate generic interface type for %s: %w", tgType.Name, err)
			}

			typeDef.WriteString(interfaceDefinition)

		case tgTypeVoiceChatStarted:
			// VoiceChatStarted is actually just empty, this is legitimate
			typeDef.WriteString("\ntype " + tgType.Name + " struct{}")

		default:
			return "", fmt.Errorf("unknown type %s has no fields - please check if this requires implementation", tgType.Name)
		}

		// Interface types need to be unmarshalled in a specific way to be received by the API.
		// To do this, we need to define a custom UnmarshalJSON method to unmarshal the right bits.
		if len(tgType.Subtypes) > 0 && tgType.sentByAPI(d) {
			unmarshalFunc, err := interfaceUnmarshalFunc(d, tgType)
			if err != nil {
				return "", fmt.Errorf("unable to generate interface unmarshal function")
			}
			if unmarshalFunc != "" {
				typeDef.WriteString("\n\n" + unmarshalFunc)
			}
		}

		return typeDef.String(), nil

	} else {
		typeFields, err := generateTypeFields(d, tgType)
		if err != nil {
			return "", fmt.Errorf("failed to generate type fields for %s: %w", tgType.Name, err)
		}

		if typeFields == "" {
			typeDef.WriteString("\ntype " + tgType.Name + " struct{}")
		} else {
			typeDef.WriteString("\ntype " + tgType.Name + " struct {")
			typeDef.WriteString(typeFields)
			typeDef.WriteString("\n}")
		}

		s, err := setupCustomUnmarshal(d, tgType)
		if err != nil {
			return "", fmt.Errorf("failed to setup custom unmarshal for %s: %w", tgType.Name, err)
		}
		typeDef.WriteString(s)
	}

	interfaces, err := generateParentTypeInterfaces(d, tgType)
	if err != nil {
		return "", fmt.Errorf("failed to generate parent type interfaces %s: %w", tgType.Name, err)
	}

	typeDef.WriteString(interfaces)

	return typeDef.String(), nil
}

// Incoming types which marshal into interfaces need special handling to make sure the interfaces are
// populated correctly.
func setupCustomUnmarshal(d APIDescription, tgType TypeDescription) (string, error) {
	var fields []customUnmarshalFieldData
	generateCustomMarshal := false
	for idx, f := range tgType.Fields {
		prefType, err := f.getPreferredType()
		if err != nil {
			return "", err
		}

		if isTgType(d, prefType) {
			fieldType, err := getTypeByName(d, prefType)
			if err != nil {
				return "", fmt.Errorf("failed to get type of parameter %s in %s: %w", prefType, tgType.Name, err)
			}

			if len(fieldType.Subtypes) > 0 {
				subtypes, err := getTypesByName(d, fieldType.Subtypes)
				if err != nil {
					return "", fmt.Errorf("failed to get subtypes from %s: %w", fieldType.Name, err)
				}
				if len(getCommonFields(subtypes)) > 0 {
					generateCustomMarshal = true
				}
			}
		}

		if idx == 0 && len(tgType.SubtypeOf) > 0 && (f.Name == "type" || f.Name == "status") {
			continue
		}

		if isTgType(d, prefType) && !f.Required {
			prefType = "*" + prefType
		}

		fields = append(fields, customUnmarshalFieldData{
			Name:    snakeToTitle(f.Name),
			Custom:  len(d.Types[prefType].Subtypes) > 0,
			Type:    prefType,
			JSONTag: fmt.Sprintf("`json:\"%s\"`", f.Name),
		})
	}

	if !generateCustomMarshal {
		return "", nil
	}

	bd := strings.Builder{}
	err := customUnmarshalTmpl.Execute(&bd, customUnmarshalData{
		Type:   tgType.Name,
		Fields: fields,
	})
	if err != nil {
		return "", err
	}
	return bd.String(), nil
}

func generateParentTypeInterfaces(d APIDescription, tgType TypeDescription) (string, error) {
	typeInterfaces := strings.Builder{}
	for _, parentTypeName := range tgType.SubtypeOf {
		parentType, err := getTypeByName(d, parentTypeName)
		if err != nil {
			return "", fmt.Errorf("failed to get parent type %s of %s: %w", parentTypeName, tgType.Name, err)
		}

		if parentTypeName == tgTypeInputMedia {
			// We also need to setup the interface method
			err = inputMediaParamsTmpl.Execute(&typeInterfaces, interfaceMethodData{
				Type:       tgType.Name,
				ParentType: parentTypeName,
			})
			if err != nil {
				return "", fmt.Errorf("failed to generate %s interface methods for %s: %w", parentType.Name, tgType.Name, err)
			}
		}

		commonFields, err := commonFieldGenerator(d, tgType, parentType)
		if err != nil {
			return "", err
		}

		typeInterfaces.WriteString(commonFields)

		err = genericInterfaceTmpl.Execute(&typeInterfaces, interfaceMethodData{
			Type:       tgType.Name,
			ParentType: parentTypeName,
		})
		if err != nil {
			return "", fmt.Errorf("failed to generate %s interface methods for %s: %w", parentType.Name, tgType.Name, err)
		}
	}

	for _, t := range getReplyMarkupTypes(d) {
		if tgType.Name == t.Name {
			err := genericInterfaceTmpl.Execute(&typeInterfaces, interfaceMethodData{
				Type:       tgType.Name,
				ParentType: "ReplyMarkup",
			})
			if err != nil {
				return "", fmt.Errorf("failed to generate replymarkup interface methods for %s: %w", tgType.Name, err)
			}

			break
		}
	}

	return typeInterfaces.String(), nil
}

func interfaceUnmarshalFunc(d APIDescription, tgType TypeDescription) (string, error) {
	constantField, err := tgType.getConstantFieldFromParent(d)
	if err != nil {
		return "", fmt.Errorf("failed to generate custom unmarshaller for %s: %w", tgType.Name, err)
	}

	var cases []customStructUnmarshalCaseData
	for _, subTypeName := range tgType.Subtypes {
		shortName := d.Types[subTypeName].getTypeNameFromParent(tgType.Name)
		cases = append(cases, customStructUnmarshalCaseData{
			ConstantFieldName: shortName,
			TypeName:          subTypeName,
		})
	}

	bd := strings.Builder{}
	err = customStructUnmarshalTmpl.Execute(&bd, customStructUnmarshalData{
		UnmarshalFuncName: "unmarshal" + tgType.Name,
		ParentType:        tgType.Name,
		ConstantFieldName: strings.Title(constantField),
		CaseStatements:    cases,
	})
	if err != nil {
		return "", err
	}

	return bd.String(), nil
}

func commonFieldGenerator(d APIDescription, tgType TypeDescription, parentType TypeDescription) (string, error) {
	// Some items need a custom marshaller to handle the "type" field
	typeName := tgType.getTypeNameFromParent(parentType.Name)

	subTypes, err := getTypesByName(d, parentType.Subtypes)
	if err != nil {
		return "", fmt.Errorf("failed to get subtypes of parent type %s of %s: %w", parentType.Name, tgType.Name, err)
	}

	commonFields := getCommonFields(subTypes)
	if len(commonFields) == 0 {
		return "", nil
	}

	constantField, err := parentType.getConstantFieldFromParent(d)
	if err != nil {
		return "", fmt.Errorf("failed to get constant field from %s: %w", parentType.Name, err)
	}

	bd := strings.Builder{}
	if len(commonFields) > 0 {
		for _, commonField := range commonFields {
			commonValueName := "v." + snakeToTitle(commonField.Name)
			if commonField.Name == constantField {
				commonValueName = strconv.Quote(typeName)
			}

			prefType, err := commonField.getPreferredType()
			if err != nil {
				return "", fmt.Errorf("failed to get preferred type for field %s of %s: %w", commonField.Name, tgType.Name, err)
			}

			err = getCommonFieldTmpl.Execute(&bd, customCommonFieldData{
				Type:            tgType.Name,
				CommonFieldName: snakeToTitle(commonField.Name),
				TypeName:        prefType,
				CommonValueName: commonValueName,
			})
			if err != nil {
				return "", fmt.Errorf("failed to generate custom const field function for %s: %w", tgType.Name, err)
			}
		}

		mergeFunc, err := generateMergeFunc(d, tgType, parentType.Name, constantField)
		if err != nil {
			return "", err
		}
		bd.WriteString(mergeFunc)

	}

	err = customMarshalTmpl.Execute(&bd, customMarshalData{
		Type:                  tgType.Name,
		ConstantFieldName:     strings.Title(constantField),
		ConstantJSONFieldName: constantField,
		ConstantValueName:     typeName,
	})
	if err != nil {
		return "", fmt.Errorf("failed to generate custom marshal function for %s: %w", tgType.Name, err)
	}

	return bd.String(), nil
}

func generateTypeFields(d APIDescription, tgType TypeDescription) (string, error) {
	parents, err := getTypesByName(d, tgType.SubtypeOf)
	if err != nil {
		return "", fmt.Errorf("failed to get parents of %s: %w", tgType.Name, err)
	}
	var constantFields []string
	for _, p := range parents {
		constantField, err := p.getConstantFieldFromParent(d)
		if err != nil {
			// if no fields, skip
			continue
		}
		constantFields = append(constantFields, constantField)
	}

	return generateStructFields(d, tgType.Fields, constantFields)
}

func generateStructFields(d APIDescription, fields []Field, constantFields []string) (string, error) {
	typeFields := strings.Builder{}
	for _, f := range fields {
		fieldType, err := f.getPreferredType()
		if err != nil {
			return "", fmt.Errorf("failed to get preferred type: %w", err)
		}

		skip := false
		for _, constantField := range constantFields {
			if f.Name == constantField {
				skip = true
				break
			}
		}
		if skip {
			continue
		}

		if isTgType(d, fieldType) && !f.Required {
			fieldType = "*" + fieldType
		}

		typeFields.WriteString("\n// " + f.Description)
		typeFields.WriteString("\n" + snakeToTitle(f.Name) + " " + fieldType + " `json:\"" + f.Name + ",omitempty\"`")
	}

	return typeFields.String(), nil
}

func generateGenericInterfaceType(d APIDescription, name string, subtypes []TypeDescription) (string, error) {
	if len(subtypes) == 0 {
		return "\ntype " + name + " interface{}", nil
	}

	commonFields := getCommonFields(subtypes)

	bd := strings.Builder{}
	bd.WriteString(fmt.Sprintf("\ntype %s interface{", name))
	for _, f := range commonFields {
		prefType, err := f.getPreferredType()
		if err != nil {
			return "", err
		}
		bd.WriteString(fmt.Sprintf("\nGet%s() %s", snakeToTitle(f.Name), prefType))
	}

	bd.WriteString(fmt.Sprintf("\n%s() ([]byte, error)", name))

	if name == tgTypeInputMedia {
		bd.WriteString(fmt.Sprintf("\n%sParams(string, map[string]NamedReader) ([]byte, error)", name))
	}

	if len(commonFields) > 0 {
		bd.WriteString(fmt.Sprintf("\nMerge%s() Merged%s", name, name))
		bd.WriteString("\n}")

		bd.WriteString(fmt.Sprintf("\n\ntype Merged%s struct{", name))

		fields, err := generateStructFields(d, getAllFields(subtypes, name), nil)
		if err != nil {
			return "", err
		}
		bd.WriteString(fields)
	}

	bd.WriteString("\n}")

	return bd.String(), nil
}

func isSubtypeOf(tgType TypeDescription, parentType string) bool {
	for _, pt := range tgType.SubtypeOf {
		if parentType == pt {
			return true
		}
	}

	return false
}

type customCommonFieldData struct {
	Type            string
	CommonFieldName string
	TypeName        string
	CommonValueName string
}

const getCustomFieldMethod = `
func (v {{.Type}}) Get{{.CommonFieldName}}() {{.TypeName}} {
	return {{.CommonValueName}}
}
`

func generateMergeFunc(d APIDescription, tgType TypeDescription, parentType string, constantField string) (string, error) {
	subTypes, err := getTypesByName(d, d.Types[parentType].Subtypes)
	if err != nil {
		return "", fmt.Errorf("failed to get subtypes by name for %s: %w", tgType.Name, err)
	}

	allParentFields := getAllFields(subTypes, parentType)

	bd := strings.Builder{}

	bd.WriteString(fmt.Sprintf("\nfunc (v %s) Merge%s() Merged%s {", tgType.Name, parentType, parentType))
	bd.WriteString(fmt.Sprintf("\n\treturn Merged%s{", parentType))
	for _, f := range tgType.Fields {
		if f.Name == constantField {
			bd.WriteString(fmt.Sprintf("\n\t%s: \"%s\",", snakeToTitle(f.Name), tgType.getTypeNameFromParent(parentType)))
			continue
		}

		deref := false
		for _, parentField := range allParentFields {
			if parentField.Name == f.Name {
				fieldType, err := f.getPreferredType()
				if err != nil {
					return "", fmt.Errorf("failed to get preferred type: %w", err)
				}

				if isTgType(d, fieldType) && f.Required != parentField.Required {
					deref = true
				}
			}
		}

		if deref {
			bd.WriteString(fmt.Sprintf("\n\t%s: &v.%s,", snakeToTitle(f.Name), snakeToTitle(f.Name)))
		} else {
			bd.WriteString(fmt.Sprintf("\n\t%s: v.%s,", snakeToTitle(f.Name), snakeToTitle(f.Name)))
		}

	}
	bd.WriteString("\n\t}")
	bd.WriteString("\n}")
	bd.WriteString("\n")
	return bd.String(), nil
}

type customUnmarshalFieldData struct {
	Name    string
	Custom  bool
	Type    string
	JSONTag string
}

type customUnmarshalData struct {
	Type   string
	Fields []customUnmarshalFieldData
}

const customUnmarshal = `
func (v *{{.Type}}) UnmarshalJSON(b []byte) error {
	// All fields in {{.Type}}, with interface fields as json.RawMessage
	type tmp struct {
        {{ range $f := .Fields }}
		{{ $f.Name }} {{ if $f.Custom }} json.RawMessage {{ else }} {{ $f.Type }} {{ end }} {{ $f.JSONTag -}}
		{{- end }}
	}
	t := tmp{}
	err := json.Unmarshal(b, &t)
	if err != nil {
		return err
	}
	{{ range $f := .Fields }}
		{{- if $f.Custom}}
			v.{{ $f.Name }}, err = unmarshal{{ $f.Type }}(t.{{$f.Name}})
			if err != nil {
				return err
			}
			{{- else }}
			v.{{ $f.Name }} = t.{{ $f.Name }}
		{{- end }}
	{{- end }}

	return nil
}
`

type customStructUnmarshalData struct {
	UnmarshalFuncName string
	ParentType        string
	ConstantFieldName string
	CaseStatements    []customStructUnmarshalCaseData
}

type customStructUnmarshalCaseData struct {
	ConstantFieldName string
	TypeName          string
}

// The alias type is required to avoid infinite MarshalJSON loops.
const customStructUnmarshal = `
func {{.UnmarshalFuncName}}(d json.RawMessage) ({{.ParentType}}, error) {
		if len(d) == 0 {
			return nil, nil
		}

		t := struct {
			{{.ConstantFieldName}} string
		}{}
		err := json.Unmarshal(d, &t)
		if err != nil {
			return nil, err
		}

		switch t.{{.ConstantFieldName}} {
		{{-  range $val := .CaseStatements }}
		case "{{ $val.ConstantFieldName }}":
			s := {{ $val.TypeName }}{}
			err := json.Unmarshal(d, &s)
			if err != nil {
				return nil, err
			}
			return s, nil
		{{ end }}
		}
		return nil, fmt.Errorf("unknown interface with {{.ConstantFieldName}} %v", t.{{.ConstantFieldName}})
}`

type customMarshalData struct {
	Type                  string
	ConstantFieldName     string
	ConstantJSONFieldName string
	ConstantValueName     string
}

// The alias type is required to avoid infinite MarshalJSON loops.
const customMarshal = `
func (v {{.Type}}) MarshalJSON() ([]byte, error) {
	type alias {{.Type}}
	a := struct{
		{{.ConstantFieldName}} string ` + "`json:\"{{.ConstantJSONFieldName}}\"`" + `
		alias
	}{
		{{.ConstantFieldName}}: "{{.ConstantValueName}}",
		alias: (alias)(v),
	}
	return json.Marshal(a)
}
`

type interfaceMethodData struct {
	Type       string
	ParentType string
}

const inputMediaParamsMethod = `
func (v {{.Type}}) {{.ParentType}}Params(mediaName string, data map[string]NamedReader) ([]byte, error) {
	if v.Media != nil {
		switch m := v.Media.(type) {
		case string:
			// ok, noop

		case NamedReader:
			v.Media = "attach://" + mediaName
			data[mediaName] = m

		case io.Reader:
			v.Media = "attach://" + mediaName
			data[mediaName] = NamedFile{File: m}

		default:
			return nil, fmt.Errorf("unknown type for InputMedia: %T", v.Media)
		}
	}
	
	return json.Marshal(v)
}
`

const genericInterfaceMethod = `
func (v {{.Type}}) {{.ParentType}}() ([]byte, error) {
	return json.Marshal(v)
}
`
